import streamlit as st
import pandas as pd
import qrcode
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
import urllib.error


# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏â‡∏ö‡∏≤‡∏Å‡∏¢‡∏≤ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á) ---
def create_drug_label(drug_name, drug_code, expiry_date, batch_no, quantity, unit):
    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå formulation ‡πÅ‡∏•‡πâ‡∏ß
    # ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£) ...
    qr_data = f"M|{drug_code}|{batch_no}|{quantity}|{unit}|{quantity}|{unit}"
    qr = qrcode.QRCode(error_correction=qrcode.constants.ERROR_CORRECT_M, box_size=8, border=2)
    qr.add_data(qr_data)
    qr.make(fit=True)
    qr_img = qr.make_image(fill_color="black", back_color="white").convert('RGB')
    try:
        main_font = ImageFont.truetype("arial.ttf", 36)
        cra_font = ImageFont.truetype("arial.ttf", 30)
    except IOError:
        main_font = ImageFont.load_default()
        cra_font = ImageFont.load_default()
    # [‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] - ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ formulation ‡πÉ‡∏ô list ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß
    text_lines_info = [
        (drug_name, main_font), (drug_code, main_font),
        (f"{expiry_date}    {batch_no}", main_font), (f"{quantity} {unit}", main_font),
    ]
    max_text_width = 0
    total_text_height = 0
    line_spacing = 10
    for text, font in text_lines_info:
        try:
            bbox = font.getbbox(text)
            text_width, text_height = bbox[2] - bbox[0], bbox[3] - bbox[1]
        except AttributeError:
            text_width, text_height = font.getsize(text)
        if text_width > max_text_width: max_text_width = text_width
        total_text_height += text_height + line_spacing
    padding, vertical_text_width, qr_text_spacing = 20, 40, 20
    total_width = vertical_text_width + qr_img.width + qr_text_spacing + max_text_width + padding
    total_height = max(qr_img.height, total_text_height) + padding * 2  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
    canvas = Image.new('RGB', (total_width, total_height), 'white')
    draw = ImageDraw.Draw(canvas)
    cra_text_img = Image.new('RGB', (50, 200), 'white')
    cra_draw = ImageDraw.Draw(cra_text_img)
    cra_draw.text((0, 0), "CRA", font=cra_font, fill="black")
    cra_text_img = cra_text_img.rotate(90, expand=True)
    canvas.paste(cra_text_img, (5, int((total_height - cra_text_img.height) / 2)))
    canvas.paste(qr_img, (vertical_text_width, int((total_height - qr_img.height) / 2)))
    x_pos_text, current_y = vertical_text_width + qr_img.width + qr_text_spacing, padding
    for text, font in text_lines_info:
        draw.text((x_pos_text, current_y), text, font=font, fill="black")
        try:
            bbox = font.getbbox(text)
            current_y += (bbox[3] - bbox[1]) + line_spacing
        except AttributeError:
            _, text_height = font.getsize(text)
            current_y += text_height + line_spacing
    return canvas


# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å URL ---
@st.cache_data(ttl=600)
def get_data_from_published_url(url):
    try:
        df = pd.read_csv(url)
        # [‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏µ‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        required_columns = ['Material', 'Material description', 'Sale Unit']
        if not all(col in df.columns for col in required_columns):
            st.error(f"Error: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ô Google Sheet")
            st.info(f"‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå CSV ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {', '.join(required_columns)}")
            return None

        # [‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] - ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Material (‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤) ‡πÄ‡∏õ‡πá‡∏ô string
        df['Material'] = df['Material'].astype(str)
        return df
    except urllib.error.URLError:
        st.error("Connection Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á URL ‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Link ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï")
        return None
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        return None


# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Streamlit App ---
st.set_page_config(page_title="Drug Label Generator", layout="wide")
st.title("‚öïÔ∏è Drug Label Generator (from Published Google Sheet)")

# --- 1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ URL ---
st.subheader("1. Connection Setup")
published_url = st.text_input(
    "https://docs.google.com/spreadsheets/d/e/2PACX-1vQJpIKf_q4h4h1VEIM0tT1MlMvoEw1PXLYMxMv_c3abXFvAIBS0tWHxLL0sDjuuBrPjbrTP7lJH-NQw/pub?gid=0&single=true&output=csv",
    help="‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô URL ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å File -> Share -> Publish to web ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å output ‡πÄ‡∏õ‡πá‡∏ô .csv"
)

if published_url:
    drug_df = get_data_from_published_url(published_url)

    if drug_df is not None:
        st.success("‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

        # --- 2. ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
        st.subheader("2. Generate Label")
        with st.form("drug_form"):
            col1, col2 = st.columns(2)
            with col1:
                # [‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Label ‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
                drug_code_input = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤ (Material Code)")
                batch_no_input = st.text_input("‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï (Batch No.)")
            with col2:
                expiry_date_input = st.text_input("‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (Expiry Date, e.g., 29.02.2028)")
                quantity_input = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (Quantity)", min_value=1, value=1, step=1)

            submitted = st.form_submit_button("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏â‡∏•‡∏≤‡∏Å‡∏¢‡∏≤")

        if submitted and drug_code_input:
            # [‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Material'
            drug_info = drug_df[drug_df['Material'] == drug_code_input]

            if not drug_info.empty:
                drug_data = drug_info.iloc[0]
                with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏â‡∏•‡∏≤‡∏Å‡∏¢‡∏≤...'):
                    # [‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà
                    final_image = create_drug_label(
                        drug_name=drug_data['Material description'],  # <-- ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤
                        drug_code=drug_code_input,
                        expiry_date=expiry_date_input,
                        batch_no=batch_no_input,
                        quantity=quantity_input,
                        unit=drug_data['Sale Unit']  # <-- ‡∏´‡∏ô‡πà‡∏ß‡∏¢
                    )

                st.success("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏â‡∏•‡∏≤‡∏Å‡∏¢‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                st.image(final_image, caption="‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏â‡∏•‡∏≤‡∏Å‡∏¢‡∏≤")

                buf = BytesIO()
                final_image.save(buf, format="PNG")
                st.download_button(
                    label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û",
                    data=buf.getvalue(),
                    file_name=f"label_{drug_code_input}_{batch_no_input}.png",
                    mime="image/png"
                )
            else:
                st.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤ '{drug_code_input}' ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")